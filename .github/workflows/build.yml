name: Build and Push Docker Images

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  BASE_IMAGE_NAME: ${{ github.repository_owner }}/ydr-base
  APP_IMAGE_NAME: ${{ github.repository_owner }}/ydr

jobs:
  build-base-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      base-image-digest: ${{ steps.build-base.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Debug authentication
        run: |
          echo "GitHub Actor: ${{ github.actor }}"
          echo "Registry: ${{ env.REGISTRY }}"
          echo "Repository: ${{ github.repository }}"
          echo "Repository Owner: ${{ github.repository_owner }}"

      - name: Extract metadata for base image
        id: meta-base
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
          flavor: |
            latest=auto

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Show base image tags
        run: |
          echo "Base image tags that will be used:"
          echo "${{ steps.meta-base.outputs.tags }}"

      - name: Build and push base image
        id: build-base
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta-base.outputs.tags }}
          labels: ${{ steps.meta-base.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-app-image:
    runs-on: ubuntu-latest
    needs: build-base-image
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Scala CLI
        uses: VirtusLab/scala-cli-setup@v1
        with:
          power: true
          jvm: temurin:21

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Test registry access
        run: |
          echo "Testing registry access..."
          # Try to pull a public image to test basic connectivity
          docker pull hello-world:latest
          echo "Registry connectivity test passed"

      - name: Extract metadata for app image
        id: meta-app
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.APP_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
          flavor: |
            latest=auto

      - name: Show app image tags
        run: |
          echo "App image tags that will be used:"
          echo "${{ steps.meta-app.outputs.tags }}"

      - name: Update base image reference
        run: |
          # Update the project.scala to use the newly built base image with specific tag
          BASE_TAG="${{ github.ref_name }}-${{ github.sha }}"
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            BASE_TAG="latest"
          fi
          echo "Using base image tag: ${BASE_TAG}"
          sed -i "s|ghcr.io/fazzou/ydr-base|${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}:${BASE_TAG}|g" project.scala

      - name: Build application image
        run: |
          # Build the Docker image with scala-cli
          scala-cli package --docker .

      - name: List built images
        run: |
          echo "Available Docker images:"
          docker images
          echo "Looking for images matching: ${{ env.REGISTRY }}/${{ env.APP_IMAGE_NAME }}"

      - name: Tag and push application image
        run: |
          # Get the image name that scala-cli created
          APP_IMAGE=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep "${{ env.REGISTRY }}/${{ env.APP_IMAGE_NAME }}" | head -n1)
          
          if [ -z "$APP_IMAGE" ]; then
            echo "Error: Could not find built image matching ${{ env.REGISTRY }}/${{ env.APP_IMAGE_NAME }}"
            exit 1
          fi
          
          echo "Built image: $APP_IMAGE"
          
          # Tag and push with all metadata tags
          echo '${{ steps.meta-app.outputs.tags }}' | while read -r tag; do
            if [ -n "$tag" ]; then
              echo "Tagging $APP_IMAGE as: $tag"
              docker tag "$APP_IMAGE" "$tag"
              echo "Pushing: $tag"
              docker push "$tag"
            fi
          done
